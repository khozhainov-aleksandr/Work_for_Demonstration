* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(3, minmax(150px, 300px));
  grid-template-rows: repeat(3, minmax(100px, auto));
  grid-auto-rows: minmax(100px, auto);
  gap: 10px;

  /* Применяется только к контейнеру для настройки элементов по имени (настройка: с новой строки указываем имена элементов в кавычках '' или "", столько раз сколько нужно что бы он занял элементов) Самое главное не оставлять пустых дыр, так как верстка сломается. Если нам нужно оставить пустое место под блок то мы ставим точку вместо имени, и тот элемент будет пустым */
  grid-template-areas:
  'header header message'
  'blog . message'
  'footer footer footer';
}

#header {
  /* Даем имя элементу, для того чтобы в блоке делать расстановку элементов по именам (задается элементу) Создает не явные линии вокруг блока (header-start / header-end) к которым, очень редко но можно обратиться */
  grid-area: header;
}

#blog {
  grid-area: blog;
}

#message {
  grid-area: message;
}

#footer {
  grid-area: footer;

  /* Если внутри элемента сетки есть еще элементы то им можно задать display: grid; и сделать сетку внутри сетки */
  /* Так же есть свойство display: subgrid; (оно наследует настройки display: grid; родительского элемента) но его поддерживает всего 3% браузеров и лучше его не использовать */
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.grid-elem {
  background-color: rgba(1, 1, 96, 1);
  color: #fff;
  line-height: 50px;
  text-align: center;
  font-size: 26px;
  border: 1px solid #000;
  border-radius: 4px;
}

.orange {
  background-color: orange;
}

@media (max-width: 768px) {
  .grid-container {
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(4, minmax(100px, auto));
    grid-template-areas:
    'header header'
    'blog message'
    'blog message'
    'footer footer';
  }
}